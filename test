#!/usr/bin/env -S -i /bin/bash
set -e
set -u
set -x

BASE="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

export PATH="$PATH:/usr/local/bin/"
export HOME="$(echo ~)"

INSTALL_DEPS="curl make python3-dev libffi-dev gcc libc-dev cargo"

echo "installing dependencies"
sudo apt-get update
DEBIAN_FRONTEND=noninteractive sudo apt-get -y install $INSTALL_DEPS

# Docker-compose should be installed
if ! command -v docker-compose &> /dev/null
then
  echo "installing docker-compose"
  curl -L "https://github.com/docker/compose/releases/download/1.29.1/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
  chmod +x /usr/local/bin/docker-compose
fi

# Golang should be installed
if ! command -v go &> /dev/null
then
  echo "installing golang"
  
  pushd /tmp
  curl -q -o go1.16.4.linux-amd64.tar.gz https://dl.google.com/go/go1.16.4.linux-amd64.tar.gz
  tar -xvf go1.16.4.linux-amd64.tar.gz
  mv go /usr/local/bin

  export GOROOT=/usr/local/bin/go
  export GOPATH=$HOME/go
  export PATH=$GOPATH/bin:$GOROOT/bin:$PATH
  popd
fi

export PATH="$PATH:$HOME/go/bin"

title() {
	echo
	echo "test: $1..."
}

assert() {
	actual="$1"
	expected="${2:-}"
	printf "\"${actual}\" == \"${expected}\"\n"
	test "$actual" = "$expected"
}

#build the cli executable
title "Build mwcli"
{
  make
  mv $BASE/bin/cli $BASE/bin/mw
}

# # get mediawiki
# title "Clone Mediawiki core"
# {
#   git clone https://gerrit.wikimedia.org/r/mediawiki/core --depth 1
#   cd core
# }

# title "Create config.json file"
# {
#   mkdir ~/.mwcli
#   echo '{"dev_mode":"docker"}' > ~/.mwcli/config.json
# }

# title "Setup hosts file"
# {
#   sudo echo "127.0.0.1  default.mediawiki.mwdd.localhost" >> /etc/hosts
#   sudo echo "127.0.0.1  postgreswiki.mediawiki.mwdd.localhost" >> /etc/hosts
#   sudo echo "127.0.0.1  mysqlwiki.mediawiki.mwdd.localhost" >> /etc/hosts
#   sudo echo "127.0.0.1  phpmyadmin.mwdd.localhost" >> /etc/hosts
#   sudo echo "127.0.0.1  adminer.mwdd.localhost" >> /etc/hosts
# }

# title "Output version"
# {
#   $BASE/bin/mw version
# }

# title "Setup & Create"
# {
#   $BASE/bin/mw docker env set PORT 8080
#   $BASE/bin/mw docker env set MEDIAWIKI_VOLUMES_CODE $(pwd)ore
#   $BASE/bin/mw docker mediawiki create
# }

# title "Validate the basic stuff"
# {
#   $BASE/bin/mw docker docker-compose ps
#   $BASE/bin/mw docker env list
#   cat ~/.mwcli/mwdd/default/.env
#   curl -s -L -N http://default.mediawiki.mwdd.localhost:8080 | grep -q "The MediaWiki logo"
# }

# title "Add the needed LocalSettings"
# {
#   echo "<?php" >> core/LocalSettings.php
#   echo "//require_once "$IP/includes/PlatformSettings.php";" >> core/LocalSettings.php
#   echo "require_once '/mwdd/MwddSettings.php';" >> core/LocalSettings.php
# }

# title "Turn on all of the services"
# {
#   $BASE/bin/mw docker mysql-replica create
#   $BASE/bin/mw docker postgres create
#   $BASE/bin/mw docker phpmyadmin create
#   $BASE/bin/mw docker adminer create
# }

# title "Install everything"
# {
#   $BASE/bin/mw docker mediawiki install --dbname mysqlwiki --dbtype mysql
#   $BASE/bin/mw docker mediawiki install --dbname postgreswiki --dbtype postgres
#   $BASE/bin/mw docker mediawiki install
# }

# title "Check the DB tools"
# {
#   CURL=$(curl -s -L -N http://phpmyadmin.mwdd.localhost:8080) && echo $CURL && echo $CURL | grep -q "Open new phpMyAdmin window"
#   CURL=$(curl -s -L -N http://adminer.mwdd.localhost:8080) && echo $CURL && echo $CURL | grep -q "Login - Adminer"
# }

# title "And check the installed sites"
# {
#   CURL=$(curl -s -L -N http://default.mediawiki.mwdd.localhost:8080) && echo $CURL && echo $CURL | grep -q "MediaWiki has been installed"
#   CURL=$(curl -s -L -N http://postgreswiki.mediawiki.mwdd.localhost:8080) && echo $CURL && echo $CURL | grep -q "MediaWiki has been installed"
#   CURL=$(curl -s -L -N http://mysqlwiki.mediawiki.mwdd.localhost:8080) && echo $CURL && echo $CURL | grep -q "MediaWiki has been installed"
# }

# title "Make sure the expected number of services appear"
# {
#   docker ps
#   docker ps | wc -l | grep -q "10"
# }

# title "Destroy it all"
# {
#   $BASE/bin/mw docker destroy
#   docker ps
#   docker ps | wc -l | grep -q "1"
# }
