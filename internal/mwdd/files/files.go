package files

import (
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"strconv"
	"strings"
	"time"
)

type staticFilesFile struct {
	data  string
	mime  string
	mtime time.Time
	// size is the size before compression. If 0, it means the data is uncompressed
	size int
	// hash is a sha256 hash of the file contents. Used for the Etag, and useful for caching
	hash string
}

var staticFiles = map[string]*staticFilesFile{
	"base.yml": {
		data:  "\x1f\x8b\b\x00\x00\x00\x00\x00\x02\xff\x8c\x93\xdfk\xdb0\x10\xc7\xdf\xfdW\x1c\xed\xa0/\x8d݆\xc2\xc0PJ\xa1\x83\r\xb6\xa5\xb4\xd9^\x8d\"]k-\xd2I\xe8d\xbb\xdd\xd8\xff>d;\xb1[\xd2Q\xfc \xa3\xfb\xdc\xcf\xef\xa9\xc5\xc0\xdaQ\t'\xcb|y\x92e\x8c\xa1\xd5\x12\xb9\xcc2\x00\xe5\xb9\xcc\x00\x00\xb4\x15\x8fX\x82\u0087\x80:\n.\x14\xf1\xc2\a\xf7\xf4\xbcH\x0e\x18z\xaau\xa6\xb18\xba\x00,\xa0hE(BC\x85rr\x8b!g'\xb7\xe5\xa1\xcbޣv\x1cIؔ\xc7sn;\xa5r\xe3\xa40\xe9\xbe\a\bc\xe7\xc2v\x9f`_^_\xa2o/*\xa1T@\xe6\x12\xce\xcf\xf2\xf4\x9d\x9f\xa56\xe8Q\xd3\xd3P\xee\xc0\x1f\xc3zu\xb3*!\xa07B\"t:\xd6\xf0\xab\xd3Fa(f\xf4)8\x92\b\x8dW\"\xa2\x9aO\x82\xb5i\x05uV\xe1\x9c/\x8d\x888\x16\x8b\xd4\xea\xe0\xc8\"\xc5i ?\xbfܭ\u007f\\\u007f\xad>\xaf\xeeח\xbdˡ>\x13\x99\x88\xef\xd7\xdf>\xdd_\xe6\x16\x95\x16\x9d\xde\xeaW\xec\x80\x1eC\xaa[\x8a\xa0 \r\x0f\x02\xb23MԎN!ւ\xb6\f\xd1\xc1\xcd\xed\xfd\x14z\xbd\xbe\xadnWw\xeb\xcb\x0f\u007f\xd2\xf1w\x17HS\xc4@\u0080wa\xa8$\xfd\xcc\xf4<\x1a\x1d\xca\xf1<\xea-\n=\x92\xe2\xca\xd1D*ϯ4}\xb3[E\xb3\f\x93n\xa3\xa9b\x14A\xd6\x13\U0004ef58ҿs#\xa3\xf5/.\x82\xdb;䃾\x854\x1a)VV<U\x1b\xa7\x9e+ֿ1\x97\x8e\x1e\xca\x02\xa3\xdcA\x8e\x1er\xf5\x1f\xf6@\xe0\xa8-\xba&\xf2[\xc1^ڃ˲y\xbb\xd3\v\xf5\xc2\xee\xdaL\xa4~\x9c\x9eư\xee\x10k\xcdI\x86\x8dؘg\xe8\x04\xc5~568:4Al\f^\x81\v`]@\b\x82\x94\xb3W \xb8\a\x8c\x96\x91A\n\x82Zx\x8f\x04\x9a \xd6\b\xc3\xe0v\"̒&\xa5\xa0ad8\xff\xb8\xece=+\x96\x17{`\x01\xdcl\b\xe3\xfe\xb1&\xeb\xbf\x00\x00\x00\xff\xffCH\xcfn\x8f\x04\x00\x00",
		hash:  "d0e6a14c396eaa6260bb93cc8786cb22d40507a21b127babf7b062bdbe3dfda4",
		mime:  "",
		mtime: time.Unix(1619249758, 0),
		size:  1167,
	},
	"mediawiki.yml": {
		data:  "\x1f\x8b\b\x00\x00\x00\x00\x00\x02\xff\x8c\x93oo\xda>\x10ǟ\xe7U\x9c\xf8\xfd\xa4J\x93\x9c\x00\xd36d\x89\aYa4\x1a\x94\xaa\x84v\xcf\"7>\x12\x8b\xc4\xf6l\x93\x80\xa6\xbe\xf7)І?\x9d\xba\x89G\xbe\xfb\xde縻o*4V(I\xe1\xaa\xef\xf7\xaf<Ϣ\xa9D\x8a\x96z\x1e@\x89\\\xb0Z\xac\x05\xf5\x00\x00D\xc92\xa4\xc0U\xbaFC\ff\xc2:\xb3\xf3\x1b\xc1^\xe9+\x93\x05\x1c\xab\xc0:\x83.͉\xce\xf5\x97>Y\xe9\x920\xcd\xd2\x1c\xfbd\xcb\xf1i\x93Ѯ\xff\xd9\xef\x11\xdb\xdbcQ:\xb3\xd3JHG\xa1\x13\x945\xe7\xc11\xe4ۼ\xb3WU\xaaؔ\xcd\xffj\x1e@\xc0\x0fj&\x1cY)CD\xa3\xa2\x97o\xa3\x8e\xd2\xe3 {\xfeI\xae\xf3\xff\xaf\xd9x\x14\x85\x8f\xd1\xf7(y\x98O\x97\xb3\xf1\"\xb9\x9e\x8f\xc6\xcf4\xa8\x98\t\xea\xba\x0erW\x16AM\xd3f\x04\xdey\xb7r\x14\xc6!%m;\u0099coHA\x13\xa5\x1c\v̘\xfb\x1b1\x9a\x85\x93\xf1┹?\x83}K=ă\xc3y\xfe\x15?\x9dO\xce\xe0\x85\xca^х\xcaN\x16w\xc1CY\t\xa3d\x89ҽ\x9c\x04\xfe\x83\xa5E\x0eO;\xa8\x98\x11jc\xa1dB:\x94L\xa6\b65B;\vN\xc1JH\x0e\xb3\x86\xfc(\xd6\xc2o\xcb\xc3\xc2*0\xf8s#\frX)\x03\xed\x88Br\xdc\xfa:\xd7@ wN[\x1a\x04:gOF\xa4\xcc)s\xe1\xc1\xb8\xf7\xe9\xe3`\xd0\u007f\x01\x13\x98=&\xd1\xed\"\x0e\xa7\xd3\xe4.\x8co\x86\x17\x9bku\x0f\xd1}\xbc\f\xa7\xc9\xcd|\x11\x0f?\xf8\xed\xf0~c\x1a\xbfP)+re\xdd\x1b\xfd\xdd\xfc>\x1e\x0e\xba\x83n\x9b\xf91\x1a\u007f]N\x92\xeb\xf9\xed\xb7h2<]\xfcY\x86\x92\xe7}IC\x95\xacD\n\xef\xf6\xe4\xa8Qr\x9b(I\xdbN2\x13rK\xb4Q\xdb\xddA#\xed1\xd9\xeb\xfaͯ\xd7}M%\x16\x99I\xf3\xa3\xe2\x0f]$\xbaZ\x99\xf5\t\x86k\xeby'\x1f\u0e7f\xcf#\a\x17\x9e\xc7\x1aS\xd1\xdf\x01\x00\x00\xff\xff\xa6\x85\xc1\xb2j\x04\x00\x00",
		hash:  "fb52785be77a00cfc1746b15f9fade0ef4b99619c9937ec6a8192d16a9337a5d",
		mime:  "",
		mtime: time.Unix(1619258185, 0),
		size:  1130,
	},
	"mediawiki/MwddSettings.php": {
		data:  "\x1f\x8b\b\x00\x00\x00\x00\x00\x02\xff\xccX[O\xe3H\x16~&\xbf\xe2L@\xed \x858\xbd#\xcd\x0e\xb0\x99^ \xe9\xe9\xecpɒ0< \x14U\xecc\xbbB\xb9\xca]U\xceE#\xfe\xfb\xeaT9!\x01\xba\xa1W\xfb\xb0H\x91\xb0\xcfw\xee\xb7*\xff\xe3S\x91\x15\xb5\xda\xee\x1b\u007f\xb5]\xb8\xb8\xedva8:\xb9\x1e\xbd\x8d\xae\xed\xc2@+\x8b\x91\x05\x962.\x8d\x859N\x00\xa5\xd5\xcb\x1aO\xa0\x01?Řp\x89q\x03\x82\x8b^\xb7\u007fr\xdb\xff\xa3\x1f\xc0>\xec\xc3_\xb5\x1d\\p{\\{\xfc\x01\xb3ЖŻ̺\xcdPBi0\x86\x19gpv\xdeo\xd2\x13\xd8\f!Ƅ\x95\xc2B\xf7\x14x\x02R\xc1\xc5\xed\x98\xfe7`\n\x8cx\xc21\xf6\xb6\x0f\xbe\f\xc6ÓA\x1f:\x9d\x0e\x04\x91\xe0\x01|\xf8\xb0\xe5\x111\xae\xbc\x01\x00\xf0\xa45\xa5\tA\xa5,\x80}\xef(\\\x94\xc6\xc2\x04\x81M\xd4\f\xe1\x16'\xd7\xf8\xb5Dc\x8f\x8eb\xa4@\x0eQ\xcfP\xb7j\xbb\x90\xcf㘌6\xc0\xa0\xd0j\xb1\x04\xe3h0\xe76#\xbbW\x8e\x14J[Ӫ\xed\xcd\xd3\x13c\xca\x1c\aZ-8\x9a\x1b\x83]\x8f\xa0\x1c\xa9H\x89\x01\x01\xa1\x03\t\x13\x06\x8fɚ\x1e\xb7\x19\xeauh|$P\xce`\xc6t\x13\x94\x86\x14\xad\xa3tO!\xd1*w\xffko\xb1\x0f\xd2:\x1au\xc7\\߈\xc6^\xac\xa2\a\xd4\xdd\tt\xbc\xe4c\xffz\x9ez'\xa1\x03\xf50\\\xa3Z9Ɯ\xcd\xf9\x03o\x91\xeb-\xa1\"&2e\xecѯ\xed\xfaq\xed\x11P\x18\xe4I\x03\x98\xd6l9~\xc0\xe5\x18\x17\xdcXӀ`ػ\xfe\xb3w=\xbe<\xb9\xe8\x05M\xd8\x1b\xfb痶|Q\xc6\x0e\x98\x8f\x02.\n\xa1b\xcaVk\x83\xe7nK\xd6=\xe5\xed\xb9/\xcfeݵ\xef_z\xf6\xad\xcc6\xf6W\xae\xacj\x86\x93\t7\x92M\x04\x82\xa5\xacF<F\x98g<\xca\xe0\x82Br\xcb\x1f8%\xc0*\x97\xa8\x86K\x04%I\xe9U.\xf6[O\x15v%\xc5\xd2\x01\xeb,\x9e1\x19a\\w\x95\xc3#4T\xf16\xc3%DLR\x15\x1aD\xd9\x04&c\"\xcc\x11\x98F\x90\xca\x02\x97`\xd1XSۣT\fW\xdc\x1d\xb8\xab\xed\x04\xf1\xe4@c!x\xc4\x02\xe8\xfcF%BY\x9a,%˱\xb1I݇\x9f\xa8s6\xf1/\x1ah\xf0eps\xd9\x1f\x8dG\xbd\xe1(\x80\xfdfm'\xd0\x18s\xf3\x9ahO\xa8\xa4V\xa8\xf7\bL5+2n\xf1\xc0XfM\xfc\x9a\xe8\xe7\x90J\xc9\vη\xd5\xdd\x1f\xbf\u007f\x9eu\x99e\x13f\xf0m\x860\x84\xcf<-5\x82*\xedF\xb2J\xc3e\n\xe6\xab\xe0\x16]ú\x04\xd3,\xcbT)b\xcaq\xbe4_E\xab\xf5\x89d\x8c\xae\xbaW\x803\x94\xb6dB,!Q\x9a\xe025 \xf8\x03B\xa1\x8cM5\x1a/c΅\x00\x89\x18\x03\x83\\i\x84UA\x81Y\x1a\x8b9\xa8\x04\xa2\f\xa3\a.\xd3V\x8dZ3\xe1\x02\xd7]\xb9\xd7\x1f@\v\x820f\x96\x85\x01\xb46\x9a\xa8\x05A\xcb\x1b\xbd^\x06k\xe2hY t \xa8\xe8\x1b\xed\xf2\x12\xe3|\v\\\xe1\xef\xcd\xd3\xee)%\xf3\xa9C\xbb\x93\xe3\x9a3\xeb\x19_\xe7Iz\xa5\x9bx\xfdt\xad\x8a|\x87~T\xea]\xae1\xb2J/]\xd5l\xba\x144+\b)\xf5ԕ\x1aO\xb1\xcb\xe2\xd9{R\xefi\x89`\xa9\xaf\xf1\xee\xe9ո\xdb\xfb|rs>\xf2$\xa1\x98/я\xf4|߬\xed\xdc;\a\xbf\xe1\x88\x0f\xc1\x1b~P\xa9;\x99\xf5xr\x903cQ\xd7\xdf2\xbf4\xa8\xdd\xfb@+e+o\vf\xcc\\io``\x95\xd2\xc1\xff\xc6٭As\xb793\xee\xe1\x13\xb4\xe1h+\x1c;<i|\x8f\xc3Ec+\x1cw\xf7U@\x9e\x05\xa3\xe2\xf9\xbf\x88\xc6.\x9c\xcc\x14\x8f\xc1̹\x8d\xa8+i\xe4kd\xb1\xa2\x91n\x95\x02dZ,\xa1Am\x8b\v\x96\x17\x02!.5!\xcb\"f\x16[EV\xec;-9[\x80`\xa9\xd3\xf3K\xfb\xd5\xca:\xae\xed<\xd6j;a\xe8G\x048-ƖI\x02\x8d\xb9\x9b\x1e\xae\xf7\xad\x82(c2E7-|\xdf|گ\x8a\xadИ\xf0\x05m\xf2\xfaq\xf5jD\x9b쪰\\I*\xc2z\xef\xf2\xf7\xfee\xafӗRuO\x9bP9\fg_N\xae\x87\xbdQg\xc2%\xd3\xcb\xfa\x0f\x9d\x03\xafi\xf6\xbf\x8d\xe6I\xe3\xed\r\xb2j\x9c\xab\xc9\x14#{Ƣ\x8c\xaa\xc9\xd3V5\x13D\x82\x19\x9f\xb3\xc0\xe9>e\xe9Ր\"\xe5\xf2\x1dT5\xe6\x00w\x95\xe0\xa3_~\xfe\xfba\x00O\xfd\xfbn\xef~\xaf\x96\x0e|\x80\xa1[;\xff\x8d\xa7\xef\\h+｢\xa7s\xd93\u070f\xa5gH\xe7h&`\xc0\xd2w\xac6:\xc2p\x8dc%#\x84\xf1\xb8ۿ\x1e\x8fݐ\xbd\xa0\xfe\xf6\xa2H\x12\xd5vpLs~㥹\v\b\xe62\xb5\x81?:r\x19s\xe8\xde¢4\\\xc9\v4\x86X>s\xb1\xc5\xf7\x1d\x9d\aLpf\xd0T\xba߿\xd8qF\x97\x15K\x9b\xf5m&r)Ss:PR\xf2\xa8k\xac.\xdd\t}\x17\x86T\tf%\x8b\xa0\x91\xe6\x85\x1d0\x9b\xb9\x03\xf4\xbc\xeec\xc2-VۯN\x83\xf1`=y<\xfd\x02-\xbb$\xe1\x05\x8b\x1ch\xa0\x15\x15|\xfd\x18\u0090l\xa5>_\xbfl\x02]\xe6\x90Ŵ\xe27/M\x1b\x9a\xd6\xe7\tw0\x88!a3\x1e)\t\r\x8d\xb9\x9aa\xec\xee%\xd5\x10K\xd5~-\f\xf7\xe6\xe9\xe7\nԁ\xfa_[\xbe<\x86-opX\xc9i\xf1H\xd5}\b\xfed\x9a\xab\xd2@\\\xedb\x8e.\x107\x05\r\xb4\xf5\x82\xf62\xfb\x83ǐ\xe7\x94氒\xf7\xd7:\x12\x8f>\x14\xa3\xbcx\xc6\xf4B\xd6ch\xf3£\xddDx\x1b\x1f\x11\x8c\xec]\x13W\x19z\xee\xe7\xf7\xac#o\xa9v>@\x17'eZ\xab\x88\xe7*ݲ \x9c1\x1d\n\x95\x86\xeb+\x93\xb7\xd51\x9d\xab\x94*\x9cp\xaf\xb0\x871aZB\xa5\xa4\x8eK>6h\x1b\x10,\xfc\xfb\x19\xd3㘛B\xb0\xe58g\x8bq\x8c\x85͂&\x1c|\xa4\xfbś\xf0(\xe3\"\xd6(\xdf\xcf\xe1OR\x15\xba\x86Z+=\xd6X\x95Nㅔ\x15\xab\x03\x9a\xa0\t\x8e^5Po\x11\xa1\xdb;]\xb4\x8c\x8b\xa7>\xaa\xe8\xc3\u007f\x9f\xf7\x1c\xdf&\xc1Ŭ[\xe6\xc5\xf0\xab\x80\xe7\x1c\xddS\xc7pʢ\a\xab}\xe3l0\xceP\xa8\"Gio\x99\x96\xee\x10\xbdA\xee\xb9\x1bݿ،\xf9\xe4\x8f\xd0ح\xc6\xee\xe5\x8c\v\xba\xb0\xb9&\xa2\v\x9bQ9\x02\xbd\x85\x88\xd9(C\xfd\xe9I\x90Co\xc9\xcfQ\xa7(\xa3噒\x96E\xd65\xfe\xaa\x1c\xfe\xf9\xac\xfb\a\xd5Ae\x882\xf6\x03\xfe\x9bP\xaf\xeeƠ~E%\xe3⤴\x19J\xcb#F\x91\xde\xf2\xe8RY\x9eT\x04\xd3\x04[j\x894A\x12`\x86.,\xb1\x92\x81\x05\x832v^zm\xc4C\xdaFL<<}\x9bX\x93n)\x12\x82\xbbح\xbf[삛\xe1\x1b溎ۊ\xff\x89\x10j~\xa6\x8a\xe5+\xb4\x1b\x83}i,\x93\xf6L\xe5\xb9?\xa7l\b\xff\x03\x97ՀI5\x8b\xf1\x0ftMמ\x1e\xb6\rk'S\xc3\x0e\xdbӤͦ\tc\xd5\xf0\xc5H\xa3\xadp\xd3_ۇ?O\x0f\xdb\xf4\xfb\xdb4чӏm\xffK>\x12%\xa1'\x920m\x1f&ӏ\xd3\xe4A\xca(\x92\xf9B\xe6\x8bj\x04\f\xbe\f\xe0\\\xf9@\xaeǬ\xbbiA\x8e.\x9fYq&8݀\xc2\xd2\xd0(\x88\x98\b'\\\x86?\xb8\xa7z\x97\xddw|N[Y@S\x9e\x95V\x01\x05\x94&\xbbJ@\xb9\x0fHd\xac\xa8\x16\x1e\xedJw\x114\xfe\x93\x11[\xcf\xed%\xd0e7\x06%\xc1\x1f\xb4\xe1\xe07\x87\x04zh\xb5Z\xff\t\x00\x00\xff\xff\xef\x95n\xf0\xa6\x14\x00\x00",
		hash:  "5a9e2066926844e5f5294f09145b929f6e6911037251c368b53534f40d890e21",
		mime:  "",
		mtime: time.Unix(1619259398, 0),
		size:  5286,
	},
	"mediawiki/MwddSpecialPage-aliases.php": {
		data:  "\x1f\x8b\b\x00\x00\x00\x00\x00\x02\xff\xb2\xb1/\xc8(\xe0\xe2R).HM\xceL\xcc\tHLOu\xcc\xc9L,N-V\xb0U\x88\x8e\xb5\xc6&\x13\xad\x9e\x9a\xa7\x1e\v\x92\xe7\xe2T\xf7-OIQW\xb0\xb5S\x88V\x80\xb2cu\xb8b\xad\xb9\x00\x01\x00\x00\xff\xff\x97Dl2Y\x00\x00\x00",
		hash:  "4ab3af2702babee43b165550753b199d3d25397464bd083293ed0e259fd9cf9a",
		mime:  "",
		mtime: time.Unix(1619250588, 0),
		size:  89,
	},
	"mediawiki/MwddSpecialPage.php": {
		data:  "\x1f\x8b\b\x00\x00\x00\x00\x00\x02\xff\xb4Rߋ\x131\x10~N\xfe\x8a\xa1\x14o\xb7x,\xben\x8f\x9e\x94>\x9c\xd0R\xc1\x83{P)\xb3ɘ\x8d\x97&K2\xf1*\xe7\xfd\xef\x92vՊ\">\xe8\xdb\xee|\xdf|?\x86\\]\x0f\xfd \xa5r\x98\x12l\x1e\xb4~3\x90\xb2\xe8\x80\x0eL^'\x18\xff_\xa3!x\x94R\f\xb9sV\xc1\x87\xec\x15\xdb\xe0a\xb7S\xc1'\x8eYqUã\x14b\xc0H\x9e\xdb\xf6\x1c\x81\x8b\xa2}\x01\xf5\\\x8a')E3\x9bI\x013x\x99\x88\xce-ږ\x0e\xa42SAO\x8c\x01#\xee!q\xb4\xde|\xf1\xd99\x98\xa6\xdc\x15r\xc1\x9b_\x13\x8d\n\xd5w\x1e\xfc\x9c\xeb7\xf8\\\na\\\xe8\xd0\xc1t_\x8e@\xf1\x93U\x94\xe6R\n\xd14p\xbb]m!d\x1e2\x83\xee\x80?\x0f\xf4\x1ct\xe7qO\xf0\f\x02\xf7\x14\xcb<\x11\xb3\xf5&AO\x91\xa4\x10S\xeem\xba\\\x18\xe2\xedq\xb7\xaa/\x17\xa8\xf5\xcd\xedf]\xc1䮷\xaa\x874Z\x01F\x82\x98\xbd\xb7\xde\\ON\x91\xfe\xbc\u007f\xd5tq\xf17̏)\xf8\x1dy\x15t)}\xde\x0f\xea\u007fj4\xb9\t\x0f\xa0\x03%X-\xc1\xa1\x01\x17\xc2\xfd\xff,\xf3nC\xda❽\xb7?\xbe\xbeuk[C\xfc\xca'F\xaf\xa8H\x18\xe2\xd5r\x1dP/ѕY\x1c\x87\x1b<\xac\xd1T\xf5\xdb\x17\xefO\xf78>ѧ\xaf\x01\x00\x00\xff\xff\x03\x01\x88\xd7\x1a\x03\x00\x00",
		hash:  "ec610b9429e18c498c19f00d1f4e8a3516f61c115fbdcfe9a6d68710d3e13706",
		mime:  "",
		mtime: time.Unix(1619252947, 0),
		size:  794,
	},
	"mediawiki/entrypoint.sh": {
		data:  "\x1f\x8b\b\x00\x00\x00\x00\x00\x02\xffDαj\xf40\x10\x04\xe0\xdeO\xb1?\xfe\xbb`/\\\n\x87T)Ҧ\v\xa4\x96\xad\xb1\xb4\x9c%\x8b\xd5\xfaty\xfbpǑt\xbb0\xc3|\xfd?\x9e%\xf3\xecj캞>\xe0\xc5}\xc9Y\x88\xa9\xb56xg\x8e2\xe0+\xd9N3\xc8\xcd\x1bngS1P\x84\u07bfE\xe1\f\xe4E+\xc1\x16Zw%/\xeb\nE6\xaab\xa8\xdd\x12\xd3\xeei\x9a&\xe2\x8bSn\xadq\xb4\xb4qcI.\xa0\xb2ߗ3\xf4\xa6\xf8\x8cȄ+\x96\xc3@\x16A\x8aplN\t\xd9\xf4\xbb쒭\xeb)\x9a\x95\xfa\xca\x1c\xa0*669K\xba\xf1\xc7]\x03+\x97\xed\b\x92+\a1\xd9PY\xb1!\a\xf6\xb8\f\x8f\xc1'V\xac\x95#\x9c\xaf\x9c\\5\xe8\x03\xb1\xde\x1b\xd5\x14\xb6ġ\xc42\x9d\x86\xb5\xa4\xc1\x15\xb7D\x9c\x86\xab\xc7|\x04~\xff\r\x8f\x86T6g\xe8\x9f_:\xfec\x8e5\xd2\xff\xb7\xee'\x00\x00\xff\xff\xf4\x97\xe2,f\x01\x00\x00",
		hash:  "99e1f477f10531d53e933fe3b99bd1fa04fe3f9b2fe8f91a86381d750f8243ef",
		mime:  "text/x-sh; charset=utf-8",
		mtime: time.Unix(1619258162, 0),
		size:  358,
	},
	"nginx/client_max_body_size.conf": {
		data:  "client_max_body_size 1024m;",
		hash:  "87e1334f7ba74c1f53d7fb2b1b035b14cb6105e94dce8c5d75303595cdc91831",
		mime:  "",
		mtime: time.Unix(1619249758, 0),
		size:  0,
	},
	"nginx/timeouts.conf": {
		data:  "\x1f\x8b\b\x00\x00\x00\x00\x00\x02\xff*(ʯ\xa8\x8cO\xce\xcf\xcbKM.\x89/\xc9\xccM\xcd/-Q042(\xb6\xe6\x82\xc8\x15\xa7\xe6\xa5\xc0%\x14\x14P\xe4\x8aR\x131\xe5\x00\x01\x00\x00\xff\xffp\x17(\x9eS\x00\x00\x00",
		hash:  "431b33796adb902aa6dfaa1d01bc7cf0365511d7c89b923a5066f529c5bc2958",
		mime:  "",
		mtime: time.Unix(1619249758, 0),
		size:  83,
	},
	"wait-for-it.sh": {
		data:  "\x1f\x8b\b\x00\x00\x00\x00\x00\x02\xff\xa4W[S\xdb\xc8\x12~ׯ\xe8\b\x1d\x8e͉\"\x9b:\xe7l\xad\x89Ȳ\xc0\x82\xabH`\xb1\xfd\xb0EQ\x94,\xb5\xd0\x14\xf2\x8c23\xe2\x12\x87\xfd\xed[s\xd1\xcd8\x89\x93\xe8\xc5\xd2\\z\xbe\xee\xfe\xe6\xeb\xf6֫\xa0\x14<\x98\x13\x1a \xbd\x87y$2g\v\x00f\x02AfD\x80\x889)$H\x06\x12\x85\x04\x92B\x04\xb7\xe4\x1e)L\x0f/ cB\x06\x05\xe3\x12\"\x8e\x10\xddG$\x8f\xe69:N\xbcHh\xb4\xc0\xd0\xeb\xcd#\x81\xea\x15\xbcA\xdfq0\xce\x18r\xde\xeb\xc3Rٺ\xba\x02\xef\xcf\xd9\xf8x\n>E\x18\xc2\xf5\xf5\x1e\xc8\f)\xa8u\xe0z\xbf\xb90\xdc\xdf\xde݃\x94\xc0\xb3\xe3\x94\"\xba\xc5^\xdfY:\x00\x00q$\xe1\xed[\x98M\x0eN\x8ea\u007f{י\xa9鑞\xf3,\x00\x8dp\xa4\x11^\xf9\xe2\x1a\xae|\t\x92,\x90\x95R}\xf8\x10\xb3\xc5\"\xa2\tD\xfcV\\\xeb\xad~\x06\xa7\xe7\x93)|\x06\xdfW\xbbC\xfde\x9eS&$0\x0e\xe3\v(i\x82\\\a\xc5\xec*\xe0\xe2\xfc\xd2\xecRǅ\xfa\xcb<*R\x1a\xc2ʞ\xaf=\a\xb9DN#I\xee1\u007fz\rO\xac\x04Q`L\xd2'\x15 \xed\x16(\xdc&\xf8\xa2\xf1Ӡ\x11\x1a\x88\x90\x9c\xc4r\xc5\xf29͟\x00\x1f1.%\x82(\xe7U\x04H\xaa-\xeb4\x8b2\x8e\x11\x13a\x8c}\xd4\xc6>\x96\x04Wm\xc1\x11\xa3\xff\x96\xc0JY\x94\n\xcf\x13\b\x19\xc9R\xc0\x02\x85J\x865 a:~\u007f|>3\xe1\xb1\xf1\x0f\xed\xd87C15\xeb\x81P\x10\x183\x9a\x88\xd7\xf0\t9\x83\x94q\xa0\xacʧ9ʇ\xc3\xf3\xf7\xef\x0f>\x1c\xc1\xc1\xe5ɤc\xe7\xd8\xfa\\9\xfc@d\xa6\xf3\x0eQ*U^*\xefSB\x89\xc8P8\x9aZ\xda.>\x12\tC\xe7\xd9q\x1e\"\"oR\xc6k\x1aZ\x1aW\x1e\xfa\xb7\x12\x065\x91k\xe7,\xf1\xc1\xad\x989\x02e\x89\xd0[톧H6\xf24i\f\xae\xca-`ic\xdc\xfa\xef\x1aL\xb9\xc0\x1f\xb5\xaf\f\xd7G\x18s)\xd1?BF\\\xdeH\x11z\xbd$\x92\b\xff\xf9\x97\xe8뉇\x8c\xe4\b\xe6z%\xac>غ?\x9e\xfc>\x9b\xfc\x05>~l]\xe3Nji\f\xfe'\x03\x044\x90\xce,GQ\xe62\xf4\xde5\x1e\xb5\xddSOO\x8b\xc2>\x04\t\xde\a2.\x02m+ж\xfa\xb0\xaf\x87i\x99簻\xbf=\xfc\x86q\xebl\xcb\x01\xb3F;0X\xef\x00\xd2d]\\\xbe\x92\x81vԉh\xf4\xd1\x12\xce\xeb\xf5\x8cM\xf0\xeb\xb0\xf7\xfb\xdd$WϜct\xb7\x0e\xbe\xc8\x11\v\x18ڴP\x132\x8e\xb2\xe4\xb4r\xaaMۛ\a\x1e\x15\x056\xf4݂1\x05Ƶ01\x10e\xa1\x15e2>\x19\u007f\x98BRr\xc5 ˓\x11dR\x16\xa3 ()y|#d\x14\xdf\xe1c\x9cE\xf4\x16\xdf\xc4l\x11D\xc1\xff~\xf9\xff\xaf\xbb\xed[a\xc5}=+*\x86{\x8a:\x8a\xe2\u007f\x9c\x1d\x9c4d\xf7\x06\xb5\xea\xf8~\x9c\x91<\xa9\x14ِ\xc8\n\xad\to#+\xf5\xfe헷d\x93\x13\u007f\xf8$\x9b\x94\x8b\xf1Q\xe8\xbdү\x92G\x05\xb8w$\xcf\xc1W\xe1\xf4\xbd\x8b\xf1\x91\v\xe3\x0f\x86\xfb*'\xa0\x86\xf4\xd7\xe5\xf1dv6\xadHj\xe3g\x06uu\xdcLTjՈ\xe3\x92sL,\xd5*-XU\x92Uq\xe8HA\xc5\"\x03B\xb1h\v\n\xceb\x14B\xe9f\xb9@*\x85ctA\x81ݪ\xc5ϱ\x02\x11G\x02\xc1\xf5\x86.\x90\x06\xf5\xceh\a\x9a\xab\xa3¬\xa3\xdb\xf3\x96\xc3 \x18\x05\xf0\xdcL*`\xa1\xb7\xac\xd6\\\r\xae\x9f\xeb9\x05\xb7=7l͉\x8c\xa4\x12\x1a\x11\xd8۫_m\x82\x9b3\x0eO\xc7gG\xe1p\xa3\xbd\xadJ\xd8\x18\xd0\x1c\xdf\xd0@\xbb.7\x16&\xd3\xcb\xf1\xe1\xa6&\xb2\x95\xf0\xb8ޮ\xbb*f\x9a\xb5a\b\xae۴TZA\xf6:ҡO\xd9]\x1f%M\xff\x9d\x17g-\x87[;\u1cfb\x11Ң\xdfM\xd6:\xa4\xfaJ\xfd\x1cR͞\x9d\x17g}\x0f\xd2V.\xec\x05Y\v\xb6\xba<?\x87\xb7\x92\x8f\x9du\x87~\x0fj\xbf\xdf]\xd6P\xfal\x1c\xaa\xe6\xd9Y_=\xbayƼ\x95'\xdda\xaf[\xd8\x02[\xabΌ\xdeQ\xf6@k-\x18\x817t\xbfn\nE\x14;\xbaL9&\xa6\xae\xe6\xaakC\xfa\xf93\xb8F\x87Vb\xect\x0e>\xe6\x9c\xf1\x91n\x8a)b\xa2\nW\xc1\xd9=I\x10\xa2\x95\xd6\xd8\xfeqycp\x19L)q\x9c*\xe2\xdeҾ\x8d\xfc\xdd\xff\x0e\x9e\x1d{\x15\xbd\xa5y\x19\xf9\x83g\xc7(\x84\xb7Կz\xc4\\yo\xa9\u007f\xf5\x88\xb3\x05q\x86\xf1\x9d.\xa2\x88\xba\x9b\xae\xfaV\x01)g\v\x98\x97\xe2i\xce\x1e\xdf}\xcfR\v\xee\xe6\xe2`z\x1az=\x8eQ^D2\x03\xaf\xf7\x90\x918\xab6\xf6\xfbN\x97\xa2z\x03\x84\u007f\x83kM\xb9/\xab\x87i\xd9Z\xaa\xd3.\x8a\xa1\xebK\xd7\xe9\x14O\xbb~\xf0\x85\xf5\xae\x8e\xab\x85\xa1C\xb5\xae\x17\xae\xfa\x905%O\xf7\xd8U\xb1\xa9Oެ\xbd^moꉕ#\xda\xfet\xa0\xbc\\\x9b\x92\x8eCgcx\xf5\x92\x92\xeb\xca\xf4\xf66x\x86=_j|\xd6\xd4m\xfbWm\xc1\x12|\r\x1c\xd3R\xe8Ƌ\xb5\xff\xa9\xd9\xda\xdb\\\xb1N\xc4Z\x85[\xedѐ\x9b0v\x96\xa6\xe4\x9f\x00\x00\x00\xff\xff\xaf\xabL\xf5\xf8\x0f\x00\x00",
		hash:  "6a2b7c49ead02dcaf820d25c8df99043aca0c0937a38c0c1a75725e0faa42326",
		mime:  "text/x-sh; charset=utf-8",
		mtime: time.Unix(1619249758, 0),
		size:  4088,
	},
}

// NotFound is called when no asset is found.
// It defaults to http.NotFound but can be overwritten
var NotFound = http.NotFound

// ServeHTTP serves a request, attempting to reply with an embedded file.
func ServeHTTP(rw http.ResponseWriter, req *http.Request) {
	path := strings.TrimPrefix(req.URL.Path, "/")
	f, ok := staticFiles[path]
	if !ok {
		if path != "" && !strings.HasSuffix(path, "/") {
			NotFound(rw, req)
			return
		}
		f, ok = staticFiles[path+"index.html"]
		if !ok {
			NotFound(rw, req)
			return
		}
	}
	header := rw.Header()
	if f.hash != "" {
		if hash := req.Header.Get("If-None-Match"); hash == f.hash {
			rw.WriteHeader(http.StatusNotModified)
			return
		}
		header.Set("ETag", f.hash)
	}
	if !f.mtime.IsZero() {
		if t, err := time.Parse(http.TimeFormat, req.Header.Get("If-Modified-Since")); err == nil && f.mtime.Before(t.Add(1*time.Second)) {
			rw.WriteHeader(http.StatusNotModified)
			return
		}
		header.Set("Last-Modified", f.mtime.UTC().Format(http.TimeFormat))
	}
	header.Set("Content-Type", f.mime)

	// Check if the asset is compressed in the binary
	if f.size == 0 {
		header.Set("Content-Length", strconv.Itoa(len(f.data)))
		io.WriteString(rw, f.data)
	} else {
		if header.Get("Content-Encoding") == "" && strings.Contains(req.Header.Get("Accept-Encoding"), "gzip") {
			header.Set("Content-Encoding", "gzip")
			header.Set("Content-Length", strconv.Itoa(len(f.data)))
			io.WriteString(rw, f.data)
		} else {
			header.Set("Content-Length", strconv.Itoa(f.size))
			reader, _ := gzip.NewReader(strings.NewReader(f.data))
			io.Copy(rw, reader)
			reader.Close()
		}
	}
}

// Server is simply ServeHTTP but wrapped in http.HandlerFunc so it can be passed into net/http functions directly.
var Server http.Handler = http.HandlerFunc(ServeHTTP)

// Open allows you to read an embedded file directly. It will return a decompressing Reader if the file is embedded in compressed format.
// You should close the Reader after you're done with it.
func Open(name string) (io.ReadCloser, error) {
	f, ok := staticFiles[name]
	if !ok {
		return nil, fmt.Errorf("Asset %s not found", name)
	}

	if f.size == 0 {
		return ioutil.NopCloser(strings.NewReader(f.data)), nil
	}
	return gzip.NewReader(strings.NewReader(f.data))
}

// ModTime returns the modification time of the original file.
// Useful for caching purposes
// Returns zero time if the file is not in the bundle
func ModTime(file string) (t time.Time) {
	if f, ok := staticFiles[file]; ok {
		t = f.mtime
	}
	return
}

// Hash returns the hex-encoded SHA256 hash of the original file
// Used for the Etag, and useful for caching
// Returns an empty string if the file is not in the bundle
func Hash(file string) (s string) {
	if f, ok := staticFiles[file]; ok {
		s = f.hash
	}
	return
}
